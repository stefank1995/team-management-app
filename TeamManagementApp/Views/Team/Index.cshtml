@inject UserManager<AppUser> UserManager
@using TeamManagementApp.Models
@model List<Team>
@{
	ViewData["Title"] = "Teams";   
}

<div class="container-fluid container-full-height">
	<!-- Teams Page -->
	<div id="chat-page" class="row">
		<!-- Team List and Buttons -->
		<div id="chat-teams" class="col-md-3 teams-section">
			<div class="mb-3">
				<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
					<h4 class="card-title">Teams</h4>
					<!-- Create a Team button -->
					<button id="open-create-btn" class="btn btn-primary">Create New</button>
					@Html.Partial("_CreateTeam", new Team())
				</div>
				<div class="input-group mb-3">
					<input type="text" class="form-control" placeholder="Type a team name..." id="search-teams-input">
					<button class="btn btn-primary">Search</button>
				</div>
				<ul class="list-group team-list">
					@foreach (var team in Model)
					{
						<li class="list-group-item team-list-item d-flex justify-content-between align-items-center">
							<a href="#">@team.Name</a>
							<div class="btn-group">
								<button id="open-assign-btn" class="btn btn-primary" data-team-id="@team.Id">
									<img src="/icons/add-user32px.png" alt="add member icon" style="width: 20px; height: 20px;">
								</button>
								@Html.Partial("_AssignTeam", team)
								<form id="delete-team-@team.Id" asp-area="" asp-controller="Team" asp-action="Delete" method="post" onsubmit="return confirmDelete('@team.Id');">
									<input type="hidden" name="id" value="@team.Id" />
									<button type="submit" class="btn btn-danger">
										<img src="/icons/remove32px.png" alt="remove team icon" style="width: 20px; height: 20px;">
									</button>
								</form>
							</div>
						</li>
					}
				</ul>
			</div>
		</div>
		<!-- Chat Area -->
		<div class="col-md-6">
			<div id="chat-area" class="mb-3 card">
				<div class="card-header">
					
					<h4 class="card-title">
						<img src="/icons/chat.png" alt="remove team icon" style="width: 20px; height: 20px;">
						Chat
					</h4>
				</div>
				<div id="chat-messages" class="card-body">
					<!-- Chat messages will be displayed here -->
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">Good morning, Nenad.</p>
						<p class="message-time">09:00</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Nenad Nenadovic</p>
						<p class="message-content">Hi Stefan, how's it going?</p>
						<p class="message-time">09:05</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">It's been a busy week. We closed a significant deal with Company X.</p>
						<p class="message-time">09:10</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">The team put in a lot of effort, and it paid off.</p>
						<p class="message-time">09:15</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">Now we need to focus on onboarding and ensuring a smooth transition.</p>
						<p class="message-time">09:20</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Nenad Nenadovic</p>
						<p class="message-content">That's fantastic news, Stefan! Congratulations to the team.</p>
						<p class="message-time">09:25</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Nenad Nenadovic</p>
						<p class="message-content">I'll coordinate with HR for the onboarding process.</p>
						<p class="message-time">09:30</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">Thanks, Nenad. It's a team effort that made it possible.</p>
						<p class="message-time">09:35</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">Also, we should review the marketing plan for the next quarter.</p>
						<p class="message-time">09:40</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">Are you available for a meeting tomorrow to discuss it?</p>
						<p class="message-time">09:45</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Nenad Nenadovic</p>
						<p class="message-content">Tomorrow works for me. Let's aim for a morning meeting.</p>
						<p class="message-time">09:50</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Nenad Nenadovic</p>
						<p class="message-content">Shall I book the conference room?</p>
						<p class="message-time">09:55</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Stefan Stefanovic</p>
						<p class="message-content">Yes, please do that, Nenad. Looking forward to it!</p>
						<p class="message-time">10:00</p>
					</div>
					<div class="chat-message">
						<p class="user-name">Nenad Nenadovic</p>
						<p class="message-content">Great, I'll take care of it. See you tomorrow.</p>
						<p class="message-time">10:05</p>
					</div>
					<div class="my-chat-message">
						<p class="my-user-name">Stefan Kolaric</p>
						<p class="message-content">Hello, world!</p>
						<p class="message-time">10:10</p>
					</div>
				</div>
			</div>
			<!-- Input field and send button for sending messages -->
			<div class="input-group mb-5">
				<input type="text" class="form-control" placeholder="Type your message" id="message-input">
				<button class="btn btn-primary">Send</button>
			</div>
		</div>

		<!-- Team Members area -->
		<div class="col-md-3">
			<div id="members-area" class="card">
				<div class="card-header">
					<h4 class="card-title">Team members</h4>
				</div>
				<div class="input-group">
					<input type="text" class="form-control" placeholder="Type a member name..." id="search-members-input">
					<button class="btn btn-primary">Search</button>
				</div>
				<div id="members-list" class="card-body">
					@foreach (var user in UserManager.Users)
					{
						<a href="#" class="user-details-link" data-user-id="@user.Id">@user.FullName<br /></a>
						@Html.Partial("_UserDetails", user)
					}
				</div>

			</div>
		</div>
	</div>
</div>



<style>
	.chat-message {
		background-color: #ededed; /* Blue background color */
		color: black; /* Text color */
		border-top-right-radius: 10px; /* Rounded corners for the top-right */
		border-bottom-left-radius: 10px;
		border-bottom-right-radius: 10px; /* Rounded corners for the bottom-right */
		margin: 5px 0; /* Spacing between messages */
		padding: 8px; /* Padding inside the chat bubble */
		display: table;
		width: auto;
	}

	.user-name {
		font-weight: bold;
		margin: 0 0 5px; /* Space between user name and message */
		color: #5DB8FF;
	}

	.message-content {
		margin: 0 0 5px; /* Space between user name and message */
		color: #000; /* Text color */
	}

	.message-time {
		font-size: 12px;
		color: #777; /* Color for time and date text */
		text-align: right; /* Align to the right */
		margin-top: -5px; /* Adjust vertical spacing */
	}

	.my-chat-message {
		background-color: #a6d8ff; /* Blue background color */
		color: fff; /* Text color */
		border-top-left-radius: 10px; /* Rounded corners for the top-right */
		border-bottom-right-radius: 10px;
		border-bottom-left-radius: 10px; /* Rounded corners for the bottom-right */
		margin: 5px 0; /* Spacing between messages */
		padding: 8px; /* Padding inside the chat bubble */
		display: table;
		width: auto;
		margin-left: auto; /* Align to the far right */
	}


	.my-user-name {
		font-weight: bold;
		display: none;
		color: #ededed;
	}

	.chat-message p {
		margin: 0; /* Remove default paragraph margin */
	}



</style>

<script>
	const chatMessages = document.querySelectorAll('.chat-message');

	let previousUserName = null;

	chatMessages.forEach((chatMessage, index) => {
		const userNameElement = chatMessage.querySelector('.user-name');
		const userName = userNameElement ? userNameElement.textContent : null;

		if (userName === previousUserName) {
			if (userNameElement) {
				userNameElement.style.display = 'none';
			}

			// Set border-top-left-radius for the current message
			chatMessage.style.borderTopLeftRadius = '10px';
		} else {
			// Add a margin-top of 10px for messages with a new user
			chatMessage.style.marginTop = '10px';
		}

		previousUserName = userName;
	});
</script>







<style>
	#chat-page {
		height: 90vh;
	}

	#chat-area {
		height: 80vh;
	}

	#members-area {
		height: 90vh;
	}

	#chat-messages {
		max-height: 90%; /* Adjust the maximum height as needed */
		min-height: 90%;
		overflow-y: auto;
	}

	#members-list{
		max-height: 85%; /* Adjust the maximum height as needed */
		min-height: 85%;
		overflow-y: auto;
	}

	#chat-teams {
		max-height: 100%; /* Adjust the maximum height as needed */
		min-height: 100%;
		overflow-y: auto;
	}

	.container-full-height {
		height: 95vh; /* 100% of the viewport height */
	}

	.teams-section {
		background-color: #f8f9fa; /* Light gray background */
		overflow-y: auto; /* Add a scrollbar when needed */
		padding: 15px; /* Add some padding for better appearance */
		border: 1px solid #dee2e6; 
	}

	.team-list {
		max-height: calc(100% - 50px); /* Adjust the max height as needed */
		overflow-y: auto;
	}

	.team-list-item {
		/*border: none; /* Remove borders */*/
	}

</style>

<script>
	// JavaScript to show and hide the modal
	const openCreateBtn = document.getElementById('open-create-btn');
	const teamCreateModal = document.getElementById('team-create-modal');
	const closeCreateBtn = document.getElementById('close-create-btn');

	openCreateBtn.addEventListener('click', function() {
		teamCreateModal.style.display = 'flex';
	});

	closeCreateBtn.addEventListener('click', function () {
		teamCreateModal.style.display = 'none';
	});

	// Close the modal when clicking outside of it
	teamCreateModal.addEventListener('click', function (event) {
		if (event.target === teamCreateModal) {
			teamCreateModal.style.display = 'none';
		}
	});
</script>

<script>
	const openAssignButtons = document.querySelectorAll('#open-assign-btn');
	const teamAssignModal = document.getElementById('team-assign-modal');
	const closeAssignBtn = document.getElementById('close-assign-btn');
	const teamIdInput = document.getElementById('teamId'); // Hidden field for teamId

	openAssignButtons.forEach(openAssignButton => {
		openAssignButton.addEventListener('click', function () {
			const teamId = openAssignButton.getAttribute('data-team-id');
			teamIdInput.value = teamId; // Set the hidden field value
			openAssignModal();
		});
	});

	function openAssignModal() {
		teamAssignModal.style.display = 'flex';
	}

	closeAssignBtn.addEventListener('click', function () {
		closeAssignModal();
	});

	function closeAssignModal() {
		teamAssignModal.style.display = 'none';
	}
</script>

<script>
	const userDetailsLinks = document.querySelectorAll('.user-details-link');
	const closeUserDetailsButtons = document.querySelectorAll('.close-user-details-btn');
	userDetailsLinks.forEach(userDetailsLink => {
		userDetailsLink.addEventListener('click', handleUserDetailsLinkClick);
	});

	// Add event listeners for each 'close-user-details-btn'
	closeUserDetailsButtons.forEach(closeButton => {
		closeButton.addEventListener('click', handleCloseUserDetailsClick);
	});

	// Event handler for 'user-details-link' clicks
	function handleUserDetailsLinkClick(event) {
		event.preventDefault(); // Prevent the default link behavior

		// Get the 'data-user-id' attribute of the clicked link
		const userId = event.currentTarget.getAttribute('data-user-id');

		// Open the user details modal for the clicked user
		openUserDetailsModal(userId);
	}

	// Function to open the user details modal for a specific user
	function openUserDetailsModal(userId) {
		// Construct the ID of the user details modal based on the user's ID
		const modalId = `user-details-modal-${userId}`;
		const userDetailsModal = document.getElementById(modalId);

		if (userDetailsModal) {
			userDetailsModal.style.display = 'flex';
		}
	}

	// Event handler for 'close-user-details-btn' clicks
	function handleCloseUserDetailsClick(event) {
		const modalToClose = event.currentTarget.closest('.modal');

		if (modalToClose) {
			modalToClose.style.display = 'none';
		}
	}
</script>




<script>
	function confirmDelete(teamId) {
		Swal.fire({
			title: 'Are you sure?',
			text: 'This action will delete the team. This cannot be undone.',
			icon: 'warning',
			showCancelButton: true,
			confirmButtonText: 'Yes, delete it!',
			cancelButtonText: 'Cancel',
			reverseButtons: false
		}).then((result) => {
			if (result.isConfirmed) {
				// Submit the form with the corresponding teamId
				document.getElementById('delete-team-' + teamId).submit();
			}
		});
		return false; // Prevent form submission by default
	}

</script>

<!-- JavaScript to load members for the selected team and add the "active" class -->
<script>
	$(document).ready(function () {
		// Event listener for team list items
		$(".team-list-item").click(function () {
			// Remove "active" class from all team list items
			$(".team-list-item").removeClass("active");

			// Get the selected team's ID from the data attribute
			var teamId = $(this).data("team-id");

			// Add "active" class to the clicked team list item
			$(this).addClass("active");

			// Make an AJAX request to retrieve members for the selected team
			//$.ajax({
			//	url: "/Team/GetMembers", // Replace with the actual server endpoint
			//	method: "GET",
			//	data: { teamId: teamId },
			//	success: function (data) {
			//		// Update the "members-list" with the retrieved members
			//		$("#members-list").html(data);
			//	},
			//	error: function () {
			//		alert("Error loading team members.");
			//	}
			//});
		});
	});
</script>






